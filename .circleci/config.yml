version: 2
jobs:
  build:
    parallelism: 3
    docker:
      - image: circleci/ruby:2.6.0-node-browsers-legacy
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: rails_cci_eb
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: rails_cci_eb
          POSTGRES_DB: rails_cci_eb
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - run:
          name: Which bundler?
          command: bundle -v
      - restore_cache:
          keys:
            - rails-cci-eb-{{ checksum "Gemfile.lock" }}
            - rails-cci-eb-
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - save_cache:
          key: rails-cci-eb-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          keys:
            - rails-cci-eb-yarn-{{ checksum "yarn.lock" }}
            - rails-cci-eb-yarn-
      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: rails-cci-eb-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace
      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - store_test_results:
        path: test_results
  deploy:
    working_directory: ~/app
    docker:
      - image: circleci/ruby:2.6.0-node-browsers-legacy
    steps:
      - checkout
      - run:
          name: Deploy to $CIRCLE_BRANCH
          command: eb deploy $CIRCLE_BRANCH
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
        requires:
          - build
        filters:
          branches:
            only:
              - production
